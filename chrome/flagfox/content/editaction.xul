<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/global.css" type="text/css"?>
<?xml-stylesheet href="chrome://flagfox/content/style.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://flagfox/locale/flagfox.dtd">

<window class="dialog"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        orient="vertical"
        onload="init();">

    <keyset>
        <key keycode="VK_ESCAPE" oncommand="window.close();"/>
        <key keycode="VK_RETURN" oncommand="onEnterKeyPress();"/>
        <key keycode="VK_UP" oncommand="onArrowKeyPress('up');"/>
        <key keycode="VK_DOWN" oncommand="onArrowKeyPress('down');"/>
        <key keycode="VK_F1" oncommand="showFullHelpPopup();"/>
    </keyset>

    <script type="application/javascript">
    <![CDATA[
        "use strict";  // Use ES5 strict mode for this script block

        Components.utils.import("chrome://flagfox/content/flagfox.jsm");

        const fullHelpContents =  // Lists of sections and their contents
        [
            "new_column",
            ["url","{baseDomainName}","{domainName}","{TLD}","{fullURL}"],
            ["meta","{title}","{meta-author}","{meta-description}","{meta-keywords}","_meta"],
            ["advanced","copystring:","javascript:"],
            "new_column",
            ["server","{IPaddress}","{countryCode}","{countryName}"],
            ["languages","{locale}","{locale-page}","{locale-UI}","{locale-OS}","{baseLocale}","_baselocale"],
            ["tips","_bookmarklets"]
        ];

        var id;
        var currentHotkey;

        var saveButton;
        var nameField;
        var templateField;
        var autocomplete;
        var favicon;

        function init()
        {
            saveButton = document.getElementById("savebutton");
            nameField = document.getElementById("name");
            templateField = document.getElementById("template");
            autocomplete = document.getElementById("templateAutocompletePopup")

            document.getElementById("show").label = Flagfox.strings.GetStringFromName("showaction");  // Reusing string rather than duplicating in DTD

            favicon = document.getElementById("favicon");
            favicon.onerror = function() {
                favicon.setAttribute("src", "chrome://flagfox/content/icons/default.png");
            };

            /* The various click type labels are in the properties files, and some locales have them quite long.
               First need to force the menu width to stay flexed to fit the box and let it crop the shown selection.
               Then need to set the labels for the menu, which will open as large as is needed to show the strings. */
            var clickMenu = document.getElementById("iconclick");
            clickMenu.setAttribute("width",clickMenu.boxObject.width);
            clickMenu.removeAttribute("flex");
            var clickMenuItems = clickMenu.getElementsByTagName("menuitem");
            for (let i=1; i < clickMenuItems.length; i++)
                clickMenuItems[i].label = Flagfox.strings.GetStringFromName(clickMenuItems[i].id);

            if (!window.arguments || window.arguments[0] === undefined || window.arguments[0] === null)
                throw "No argument passed to dialog";
            id = window.arguments[0];  // This window takes argument via openDialog (id may be 0)

            if (id != "new")
            {
                var action = Flagfox.actions.getByID(id);
                Flagfox.actions.assertValid(action);

                if (!action.custom)  // User may only edit name/template of custom actions
                {
                    nameField.readOnly = true;
                    templateField.readOnly = true;
                    document.getElementById("templateBox").hidden = true;
                    document.getElementById("helpBox").hidden = true;
                    document.getElementById("getmoreBox").hidden = true;
                }

                document.title = Flagfox.strings.GetStringFromName(action.custom ? "editcustomactiontitle" : "editdefaultactiontitle");
                document.getElementById("show").checked = !!action.show;

                nameField.value = Flagfox.actions.getLocalizedName(action);
                templateField.value = action.template;
                updateFavicon();

                if (action.iconclick)
                    document.getElementById("iconclick").selectedItem = document.getElementById(action.iconclick);
                if (action.hotkey)
                    document.getElementById("hotkey").value = opener.hotkeyToString(action.hotkey);
                currentHotkey = action.hotkey;
            }
            else  // New custom action
            {
                document.title = Flagfox.strings.GetStringFromName("addnewactiontitle");
                document.getElementById("savebutton").setAttribute("icon","add");

                var createNewWithTemplate = window.arguments[1];
                if (typeof createNewWithTemplate == "string")
                {
                    templateField.value = opener.cleanImportedLine(createNewWithTemplate, opener.templateMaxLength);
                    updateFavicon();
                }
                var createNewWithName = window.arguments[2];
                if (typeof createNewWithName == "string")
                {
                    nameField.value = opener.cleanImportedLine(createNewWithName, opener.nameMaxLength);
                }
            }

            watchForRequiredFields();

            document.getElementById("countryName-row").tooltipText += Flagfox.countrynames.GetStringFromName("US");

            if (!templateField.readOnly)
            {
                // Drops directly onto text boxes will still work as normal; these listeners are to let drops onto other parts of the dialog have an effect
                window.addEventListener("dragover",onDragOver);
                window.addEventListener("drop",onDragDrop);
            }

            window.sizeToContent();  // In case the window was already open and was reloaded
        }

        function save()
        {
            Flagfox.actions.assertLoaded();

            if (id === undefined || id === null)
                throw "No id to save";

            if (id == "new")
                id = Flagfox.actions.create();  // Create a new blank custom action at the end of the list

            var action = Flagfox.actions.getByID(id);

            if (action.custom)
            {
                action.name = nameField.value.trim();
                action.template = opener.safeDecodeURI(templateField.value.trim());  // Avoid user encoding; would double-encode
                Flagfox.actions.assertValid(action);
            }

            action.show = document.getElementById("show").checked ? true : undefined;

            var currentHotclick = document.getElementById("iconclick").selectedItem.id;
            Flagfox.actions.setBindings(id, currentHotclick, currentHotkey);

            Flagfox.actions.save();
            opener.generateActionsEditList();
            opener.focusAction(id);
        }

        function onDragOver(event)
        {
            if (!event.dataTransfer ||
                 event.target.id == "template")  // Allow dropping placeholders into template box as normal
                return;
            if ( (event.dataTransfer.types.contains("text/x-moz-url") && event.dataTransfer.getData("text/x-moz-url").length) ||
                 (event.dataTransfer.types.contains("text/plain") && event.dataTransfer.getData("text/plain").length) )
            {
                event.preventDefault();  // Allow dropping
                event.dataTransfer.dropEffect = "copy";
            }
        }

        function onDragDrop(event)
        {
            var templateToDrop = null;
            var nameToDrop = null;
            if (event.dataTransfer.types.contains("text/x-moz-url"))
            {
                var lines = event.dataTransfer.getData("text/x-moz-url").split('\n');
                templateToDrop = lines[0];
                nameToDrop = lines[1];
            }
            else if (event.dataTransfer.types.contains("text/plain"))
            {
                var text = event.dataTransfer.getData("text/plain");
                var lines = text.split('\n').filter(function(line){return line.length>0;});
                for (let i in lines)
                    if (opener.containsTemplateText(lines[i]))
                    {
                        templateToDrop = lines[i];
                        if (lines[i-1] !== undefined && !opener.containsTemplateText(lines[i-1]))
                            nameToDrop = lines[i-1];
                        break;
                    }
                if (!templateToDrop)
                    templateToDrop = text;
            }
            if (templateToDrop && !templateField.readOnly)
            {
                templateField.value = opener.cleanImportedLine(templateToDrop, opener.templateMaxLength);
                updateFavicon();
            }
            if (nameToDrop && !nameField.readOnly)
            {
                nameField.value = opener.cleanImportedLine(nameToDrop, opener.nameMaxLength);
            }
        }

        function enterHotkey(event)
        {
            var mods = "";
            if (event.ctrlKey)
                mods += "ctrl ";
            if (event.altKey)
                mods += "alt ";
            if (event.metaKey)  // Does not work under Windows
                mods += "meta ";
            if (mods == "" || !event.charCode)
                return;  // No modifier or no key; not valid hotkey (can get event.charCode=0 for tab & meta)

            if (event.shiftKey)
                mods += "shift ";
            mods = mods.trim();

            var key = String.fromCharCode(event.charCode).toLowerCase();

            if (event.ctrlKey &&
                !event.altKey && !event.metaKey && !event.shiftKey &&
                (key == "a" || key == "z" || key == "x" || key == "c" || key == "v"))
                return;  // TODO: detect these; another locale might be fine with them?

            currentHotkey = { mods:mods, key:key };
            event.target.value = opener.hotkeyToString(currentHotkey);
        }

        // The change event only fires after unfocus and the input event doesn't catch paste or undo, thus I need to watch the status manually
        function watchForRequiredFields()
        {
            var checkRequiredInterval = setInterval(function() {
                saveButton.disabled = (!nameField.value.trim().length || !templateField.value.trim().length);
            }, 100);
            window.onunload = function() { clearInterval(checkRequiredInterval); };
        }

        function updateFavicon()
        {
            var text = templateField.value.trim();
            favicon.src = text ? Flagfox.getFaviconForTemplate(text) : "" ;  // Get favicon or local icon if disabled, or clear if empty
        }

        function generateAutocomplete()
        {
            function newListBox(rowCount)
            {
                var listBox = document.createElement("listbox");
                listBox.setAttribute("rows", rowCount+1);  // FIXME: need +1 to prevent occasional phantom vertical scroll bar for no reason
                listBox.setAttribute("style", "margin: 0;");
                var listCols = document.createElement("listcols");
                listCols.appendChild(document.createElement("listcol"));
                listCols.appendChild(document.createElement("listcol"));
                listBox.appendChild(listCols);
                return listBox;
            }
            function newItem(label,value)
            {
                var row = document.createElement("listitem");
                var cell = document.createElement("listcell");
                cell.setAttribute("label", label);
                row.appendChild(cell);
                cell = document.createElement("listcell");
                cell.setAttribute("label", value);
                row.appendChild(cell);
                return row;
            }

            function findPossibleCompletions(str)
            {
                var matches1 = [];
                var matches2 = [];
                fullHelpContents.forEach( function(sectionContents) {
                    if (sectionContents instanceof Array)
                        sectionContents.forEach( function(content) {
                            if (content[0] == "{")
                            {
                                var contentLabel = getHelpString(content);
                                var contentPos = content.toLowerCase().indexOf(str);
                                if (contentPos != -1)
                                {
                                    matches1.push([content, contentLabel, contentPos]);
                                    return;
                                }
                                var labelPos = contentLabel.toLocaleLowerCase().indexOf(str);
                                if (labelPos != -1)
                                {
                                    matches2.push([content, contentLabel, labelPos]);
                                    return;
                                }
                            }
                        });
                });
                // Sort first by whether the match was in the parameter or its description, then by position of the match in where it was found
                function sortByRank(a,b) { return a[2] - b[2]; }
                matches1.sort(sortByRank);
                matches2.sort(sortByRank);
                return matches1.concat(matches2);
            }

            if (autocomplete.firstChild)
                autocomplete.removeChild(autocomplete.firstChild);  // Clear autocomplete popup contents if needed

            var textBeforeCursor = templateField.value.substring(0,templateField.selectionEnd);
            var openBracePos = textBeforeCursor.lastIndexOf("{");
            var textToAutocomplete = (openBracePos != -1) ? textBeforeCursor.substring(openBracePos+1) : "";
            if (textToAutocomplete.length && textToAutocomplete.lastIndexOf("}") == -1)
            {
                var autocompletions = findPossibleCompletions(textToAutocomplete.toLocaleLowerCase());
                if (autocompletions.length)
                {
                    var listBox = newListBox(autocompletions.length);
                    for (let i in autocompletions)
                    {
                        let param = autocompletions[i][0];
                        var label = autocompletions[i][1];
                        var item = newItem(label,param);
                        let onSelectItem = function()
                        {
                            templateField.value = templateField.value.substring(0,openBracePos) + param + templateField.value.substring(templateField.selectionEnd);
                            templateField.selectionStart = templateField.selectionEnd = openBracePos + param.length;
                            autocomplete.hidePopup();
                        };
                        item.addEventListener("click",onSelectItem);
                        let onHoverItem = function(event)
                        {
                            listBox.selectedItem = event.target;
                        };
                        item.addEventListener("mouseover",onHoverItem);
                        listBox.appendChild(item);
                    }
                    autocomplete.appendChild(listBox);
                    autocomplete.openPopup(templateField,"after_start");
                    return;
                }
            }
            autocomplete.hidePopup();
        }

        function onEnterKeyPress()
        {
            if (autocomplete.state == "open")
            {
                var listBox = autocomplete.firstChild;
                if (!listBox.selectedItem)
                    autocomplete.hidePopup();
                else
                    listBox.selectedItem.click();
            }
            else  // Save and close, if possible
            {
                if (saveButton.disabled || nameField.readOnly)
                    return;
                var focusedID = document.commandDispatcher.focusedElement.parentNode.parentNode.id;
                if (focusedID != "template" && focusedID != "name")  // Return key saves for these two fields
                    return;
                save();
                window.close();
            }
        }

        function onArrowKeyPress(key)  // Select up/down in the list box, with wrap-around
        {
            if (autocomplete.state == "open")
            {
                var listBox = autocomplete.firstChild;
                if (key == "up")
                {
                    if (listBox.selectedIndex > 0)
                        listBox.selectedIndex--;
                    else
                        listBox.selectedIndex = listBox.getRowCount()-1;
                }
                else if (key == "down")
                {
                    if (listBox.selectedIndex < listBox.getRowCount()-1)
                        listBox.selectedIndex++;
                    else
                        listBox.selectedIndex = 0;
                }
            }
        }

        function getHelpString(name)
        {
            return Flagfox.helpstrings.GetStringFromName(name.toLowerCase().replace(/[{}:]/g,""));
        }

        function generateFullHelpPopup(fullPlaceholdersPallete)
        {
            function createLabel(text)
            {
                var label = document.createElement("label");
                label.setAttribute("value",text);
                return label;
            }
            function createDescription(text)
            {
                var desc = document.createElement("description");
                desc.setAttribute("width","100%");
                desc.setAttribute("flex","1");
                desc.textContent = text;
                return desc;
            }
            function createPasteButton(toPaste)
            {
                var icon = document.createElement("image");
                icon.setAttribute("class","icon");
                icon.setAttribute("minwidth","16");
                icon.setAttribute("minheight","16");
                icon.setAttribute("src","chrome://flagfox/content/icons/copy.png");
                icon.setAttribute("tooltiptext",Flagfox.strings.GetStringFromName("pasteintotemplate"));
                icon.onclick = function() {
                    closeFullHelpPopup();
                    pastePlaceholder(toPaste);
                };
                return icon;
            }

            var columnRows;  // Created by each "new_column"

            fullHelpContents.forEach( function(sectionContents) {
                if (sectionContents == "new_column")
                {
                    var columnGrid = document.createElement("grid");
                    columnGrid.setAttribute("style","padding: 2px 10px;");
                    var gridColumns = document.createElement("columns");
                    var gridColumn = document.createElement("column");
                    gridColumn.setAttribute("flex","1");
                    gridColumns.appendChild(gridColumn);
                    gridColumns.appendChild(gridColumn.cloneNode(false));
                    gridColumns.appendChild(gridColumn.cloneNode(false));
                    columnGrid.appendChild(gridColumns);
                    columnRows = document.createElement("rows");
                    columnGrid.appendChild(columnRows);
                    fullPlaceholdersPallete.appendChild(columnGrid);
                    return;
                }
                sectionContents.forEach( function(content) {
                    if (content[0] == "{")  // "{something}"
                    {
                        var row = document.createElement("row");
                        row.appendChild(createLabel(getHelpString(content)));
                        row.appendChild(createLabel(content));
                        row.appendChild(createPasteButton(content));
                        columnRows.appendChild(row);
                    }
                    else if (content[content.length-1] == ":")  // "something:"
                    {
                        var row = document.createElement("hbox");
                        row.appendChild(createDescription(getHelpString(content)));
                        row.appendChild(createPasteButton(content));
                        columnRows.appendChild(row);
                    }
                    else if (content[0] == "_")  // Comment (IDs start with '_')
                    {
                        var desc = createDescription(getHelpString(content));
                        columnRows.appendChild(desc);
                    }
                    else  // Section header
                    {
                        var label = createLabel(getHelpString(content));
                        label.setAttribute("style","font-weight: bold; padding-top: 10px;");
                        columnRows.appendChild(label);
                    }
                });
            });
        }

        function showFullHelpPopup()
        {
            var popup = document.getElementById("fullHelpPopup");
            var fullPlaceholdersPallete = document.getElementById("fullPlaceholdersPallete");
            if (fullPlaceholdersPallete.firstChild)
            {
                // Center relative to this window (if done by screen, may show wrong with multiple monitors)
                var x = window.screenX + window.outerWidth/2 - popup.boxObject.width/2;
                var y = window.screenY + window.outerHeight/2 - popup.boxObject.height/2;
                popup.openPopupAtScreen(x,y);
                return;
            }

            // No children; need to generate popup contents
            generateFullHelpPopup(fullPlaceholdersPallete);

            if (!fullPlaceholdersPallete.firstChild)
                throw "Failed to generate help popup contents!";

            /* HACK: There seems to be no sane way to open it centered directly as it has no dimensions until opened.
               The only way around this is to show it once to render dimensions then move it to where it needs to go.
               Once it has been rendered once, it can be hidden and reshown at its correct position on screen. */
            function onceMoreWithFeeling()
            {
                popup.removeEventListener("popupshown",onceMoreWithFeeling);
                popup.hidePopup();
                showFullHelpPopup();
            }
            popup.addEventListener("popupshown",onceMoreWithFeeling);
            popup.openPopup();
        }

        function closeFullHelpPopup()
        {
            document.getElementById("fullHelpPopup").hidePopup();
        }

        function pastePlaceholder(toPaste)
        {
            if (toPaste[toPaste.length-1] == ":")  // Prefix
            {
                if (templateField.value.substr(0,toPaste.length) == toPaste)
                    return;  // Don't paste prefix twice

                if (templateField.value[10] != ":")
                    templateField.value = toPaste + templateField.value;
                else  // Already has a prefix; replace instead of paste
                    templateField.value = toPaste + templateField.value.substr(11);

                updateFavicon();
            }
            else
            {
                templateField.value = templateField.value.substr(0,templateField.selectionStart) + toPaste + templateField.value.substr(templateField.selectionEnd);
            }
        }

        function gotoGetMorePage()
        {
            opener.gotoGetMorePage();
            if (id == "new" && templateField.value == "")
                window.close();  // Close this dialog if it hasn't been used yet when we're going to the forum for new actions
        }
    ]]>
    </script>

    <hbox>
        <vbox id="mainBox">
            <checkbox id="show" checked="true" tabindex="1"/> <!-- defaults to checked for new actions; label set from JS -->
            <hbox>
                <label value="&action.namelabel;" control="name"/>
                <textbox flex="1" id="name" maxlength="25" tabindex="2"/>
            </hbox>
            <hbox>
                <label value="&action.clicklabel;" control="iconclick"/>
                <menulist flex="1" sizetopopup="none" crop="end" id="iconclick" tabindex="3">
                    <menupopup> <!-- labels set from JS -->
                        <menuitem label=""/>
                        <menuitem id="click"/>
                        <menuitem id="doubleclick"/>
                        <menuitem id="tripleclick"/>
                        <menuitem id="middleclick" tooltiptext="&action.middleclicktooltip;"/>
                        <menuitem id="doublemiddleclick" tooltiptext="&action.middleclicktooltip;"/>
                        <menuitem id="triplemiddleclick" tooltiptext="&action.middleclicktooltip;"/>
                    </menupopup>
                </menulist>
            </hbox>
            <hbox>
                <label value="&action.hotkeylabel;" control="hotkey"/>
                <!-- Hotkey detection fires on the keypress event. The input event fires after it on mod-less keypress; before it with mods (other than shift).
                     null context gets rid of standard copy/paste menu; 100% width gets rid of bad auto-resizing on select under some themes -->
                <textbox flex="1" id="hotkey" context="null" width="100%"
                        oninput="currentHotkey=undefined; this.value='';" onkeypress="enterHotkey(event);"
                        emptytext="&action.hotkeyhelp;" tabindex="4"/>
            </hbox>
        </vbox>

        <vbox id="helpBox" class="roundedbox">
            <hbox>
                <label value="&action.placeholderslabel;"/>
                <spacer minwidth="20" flex="1"/>
                <hbox class="icon text-link" onclick="showFullHelpPopup();">
                    <image src="chrome://flagfox/content/icons/help.png"/>
                    <label value="&showall;"/>
                </hbox>
            </hbox>
            <grid>
                <columns>
                    <column flex="1"/>
                    <column style="width: 14ch;"/> <!-- "ch" unit is width of '0' character -->
                </columns>
                <rows>
                    <row tooltiptext="&action.exampleoutput; Flagfox :: Add-ons for Firefox">
                        <label value="&action.pagetitle;" control="title"/>
                        <textbox readonly="true" class="plain" clickSelectsAll="true" value="{title}" id="title"/>
                    </row>
                    <row tooltiptext="&action.exampleoutput; https://addons.mozilla.org/addon/5791">
                        <label value="&action.fullpageurl;" control="fullURL"/>
                        <textbox readonly="true" class="plain" clickSelectsAll="true" value="{fullURL}" id="fullURL"/>
                    </row>
                    <row tooltiptext="&action.exampleoutput; addons.mozilla.org">
                        <label value="&action.domainname;" control="domainName"/>
                        <textbox readonly="true" class="plain" clickSelectsAll="true" value="{domainName}" id="domainName"/>
                    </row>
                    <row tooltiptext="&action.exampleoutput; 63.245.209.91">
                        <label value="&action.ipaddress;" control="IPaddress"/>
                        <textbox readonly="true" class="plain" clickSelectsAll="true" value="{IPaddress}" id="IPaddress"/>
                    </row>
                    <row tooltiptext="&action.exampleoutput; " id="countryName-row"> <!-- name fetched from localized list -->
                        <label value="&action.country;" control="countryName"/>
                        <textbox readonly="true" class="plain" clickSelectsAll="true" value="{countryName}" id="countryName"/>
                    </row>
                </rows>
            </grid>
            <panel id="fullHelpPopup" style="padding: 4px;">
                <hbox id="fullPlaceholdersPallete"/> <!-- Contents generated in JS -->
                <hbox>
                    <spacer flex="1"/>
                    <label value="&close;" class="text-link" style="margin: 0 10px;" onclick="closeFullHelpPopup();"/>
                </hbox>
            </panel>
        </vbox>
    </hbox>

    <hbox id="templateBox">
        <label value="&action.templatelabel;" control="template"/>
        <textbox id="template" newlines="stripsurroundingwhitespace" flex="1" maxlength="1000" style="direction: ltr;"  tabindex="5"
                 oninput="updateFavicon(); generateAutocomplete();" aria-autocomplete="list" emptytext="&action.templatehelp;">
            <image id="favicon" style="-moz-padding-end: 5px;" height="16"/>
        </textbox>
        <panel id="templateAutocompletePopup" noautofocus="true"/>
    </hbox>

    <hbox>
        <spacer width="10"/>
        <hbox id="getmoreBox" class="icon text-link" onclick="gotoGetMorePage();">
            <image src="chrome://flagfox/content/icons/goto.png"/>
            <label value="&action.seeforumslink;"/>
        </hbox>
        <spacer flex="1"/>
        <button label="&save;" icon="accept" id="savebutton" oncommand="save(); window.close();" tabindex="6"/>
        <button label="&cancel;" icon="cancel" oncommand="window.close();" default="true" tabindex="7"/>
    </hbox>

</window>
