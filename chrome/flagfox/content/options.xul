<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/global.css" type="text/css"?>
<?xml-stylesheet href="chrome://flagfox/content/style.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://flagfox/locale/flagfox.dtd">

<window class="dialog"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        orient="vertical"
        autostretch="always"
        onload="init();"
        onunload="emptyTrashAndSave();"
        title="&prefs.title;">

    <keyset>
        <key keycode="VK_ESCAPE" oncommand="window.close();"/>
        <key keycode="VK_INSERT" oncommand="openEditAction('new');"/>
        <key keycode="VK_DELETE" oncommand="onDeleteKeyPress();"/>
        <key keycode="VK_BACK" oncommand="onDeleteKeyPress();"/> <!-- Some keyboards may not have a delete key or label their backspace key as "delete" (ex: Mac laptops) -->
        <key keycode="VK_RETURN" oncommand="onEnterKeyPress();"/>
        <key keycode="VK_F1" oncommand="gotoGetMorePage();"/>
        <key keycode="VK_F5" oncommand="generateActionsEditList();"/>
        <key keycode="VK_UP" oncommand="onNavigationKeyPress('up');"/>
        <key keycode="VK_DOWN" oncommand="onNavigationKeyPress('down');"/>
        <key keycode="VK_PAGE_UP" oncommand="onNavigationKeyPress('pageup');"/>
        <key keycode="VK_PAGE_DOWN" oncommand="onNavigationKeyPress('pagedown');"/>
        <key keycode="VK_HOME" oncommand="onNavigationKeyPress('home');"/>
        <key keycode="VK_END" oncommand="onNavigationKeyPress('end');"/>
        <key modifiers="accel" key="N" oncommand="openEditAction('new');"/>
        <key modifiers="accel" key="C" oncommand="openCloneSelectedAction();"/>
        <key modifiers="accel" key="V" oncommand="attemptPaste();"/>
    </keyset>

    <stringbundleset>
        <stringbundle id="platformKeys" src="chrome://global-platform/locale/platformKeys.properties"/>
    </stringbundleset>

    <script type="application/javascript">
    <![CDATA[
        "use strict";  // Use ES5 strict mode for this script block

        Components.utils.import("chrome://flagfox/content/flagfox.jsm");
        Components.utils.import("chrome://flagfox/content/portableprefs.jsm");

        // Character limits from edit action dialog
        const nameMaxLength = 25;
        const templateMaxLength = 1000;

        const importableTextTypes = ["text/x-moz-url", "text/plain", "text/html"];  // Understood types, in order of preference (importable via importData())

        var clipboardStringBuffer = null;  // Holds whatever was last successfully fetched from the clipboard

        var actionsBox = null;
        var platformKeys = null;

        var needToSaveActions = false;  // Need to save to pref on close?

        function init()
        {
            try
            {
                actionsBox = document.getElementById("actionsRichlistbox");
                platformKeys = document.getElementById("platformKeys");

                generateActionsEditList();

                if (prefs.hasUserValue("warn.proxy") || prefs.hasUserValue("warn.stale") || prefs.hasUserValue("warn.tld"))
                    document.getElementById("resetMessagesLink").hidden = false;  // Only show reset link if there's something to reset

                document.getElementById("showFaviconsCheckbox").checked = prefs.get("showfavicons");

                document.getElementById("openLinksInMenu").selectedItem = document.getElementById(prefs.get("openlinksin"));

                // Must all listen to window rather than actionsBox to be able to detect tooltips when they get in the way
                window.addEventListener("dragover",onDragOver);
                window.addEventListener("dragexit",onDragExit);
                window.addEventListener("drop",onDragDrop);
            }
            catch (e) { Flagfox.error("Failed to init options window",e); }
        }

        function getIDofActionFromChild(child)
        {
            var ancestor = child;
            do
            {
                if (ancestor.tagName == "richlistitem")
                    return actionsBox.getIndexOfItem(ancestor);  // Return id
                ancestor = ancestor.parentNode;
            }
            while (ancestor);
            return -1;
        }

        function onActionCheckboxClicked(event)
        {
            var id = getIDofActionFromChild(event.target);
            Flagfox.actions.getByID(id).show = event.target.checked ? true : undefined;
            softSaveActions();
        }

        function onEditActionClicked(event)
        {
            if (event.target.disabled)
                return;
            var id = getIDofActionFromChild(event.target);
            openEditAction(id);
        }

        function onToggleDeleteActionClicked(event)
        {
            var id = getIDofActionFromChild(event.target);
            toggleDeleteAction(id);
        }

        function generateActionsEditList()
        {
            Flagfox.actions.assertLoaded();

            var getString = Flagfox.strings.GetStringFromName;

            function createElement(tagName /*, attribute1[name,value], attribute2[name,value], ... */)
            {
                var newElement = document.createElement(tagName);
                for (let i=1; i<arguments.length; i++)
                    newElement.setAttribute(arguments[i][0], arguments[i][1]);
                return newElement;
            }

            // Generate base template node for all list items
            var defaultItemTemplate = createElement("richlistitem",
                                                   ["style","-moz-padding-end: 3px;"],
                                                   ["ondblclick","onEditActionClicked(event);"]);
            // Create checkbox node
            // * Attributes needed per action: state of "checked"
            defaultItemTemplate.appendChild( createElement("checkbox",
                                                          ["tooltiptext",getString("showaction")],
                                                          ["oncommand","onActionCheckboxClicked(event);"]) );
            // Create icon node
            // * Attributes needed per action: favicon URL in "src" (if enabled)
            defaultItemTemplate.appendChild( createElement("image",
                                                          ["width","16"],
                                                          ["height","16"]) );
            // Create name node
            // * Attributes needed per action: localized name in "value" and "tooltiptext"
            defaultItemTemplate.appendChild( createElement("label",
                                                          ["flex","1"],
                                                          ["width","80"],
                                                          ["crop","end"]) );
            // Create shortcuts node
            // * Attributes needed per action: shortcuts list in "value" and "tooltiptext"
            defaultItemTemplate.appendChild( createElement("label",
                                                          ["flex","1"],
                                                          ["width","100"],
                                                          ["crop","end"]) );
            // Fork templates for default and custom actions
            var customItemTemplate = defaultItemTemplate.cloneNode(true);
            // Create edit button node for default actions
            defaultItemTemplate.appendChild( createElement("image",
                                                          ["class","icon"],
                                                          ["src","chrome://flagfox/content/icons/configure.png"],
                                                          ["tooltiptext",getString("editdefaultaction")],
                                                          ["onclick","onEditActionClicked(event);"]) );
            // Create edit button node for custom actions
            customItemTemplate.appendChild( createElement("image",
                                                         ["class","icon"],
                                                         ["src","chrome://flagfox/content/icons/edit.png"],
                                                         ["tooltiptext",getString("editcustomaction")],
                                                         ["onclick","onEditActionClicked(event);"]) );
            // Create delete button node for custom actions
            customItemTemplate.appendChild( createElement("image",
                                                         ["class","icon"],
                                                         ["src","chrome://flagfox/content/icons/delete.png"],
                                                         ["tooltiptext",getString("deleteaction")],
                                                         ["onclick","onToggleDeleteActionClicked(event);"]) );
            // Create undelete button node for custom actions
            customItemTemplate.appendChild( createElement("image",
                                                         ["class","icon"],
                                                         ["src","chrome://flagfox/content/icons/undelete.png"],
                                                         ["tooltiptext",getString("undeleteaction")],
                                                         ["onclick","onToggleDeleteActionClicked(event);"],
                                                         ["hidden",true]) );
            // Create spacer node for default actions to align default and custom actions better
            defaultItemTemplate.appendChild( createElement("spacer",["width","8"]) );
            // Done creating templates

            // If this list is being refreshed, remember deletion statuses and clear old list
            var trashBin = [];
            for (let i = actionsBox.getRowCount()-1; i >= 0; i--)
            {
                var item = actionsBox.getItemAtIndex(i);
                if (item.disabled)
                    trashBin[i] = true;        // Record delete pending state
                actionsBox.removeChild(item);  // Remove old generated item
            }

            // Generate list for actions (starting from templates)
            for (let i=0; i < Flagfox.actions.length; i++)
            {
                var action = Flagfox.actions.getByID(i);

                let newItem = action.custom ? customItemTemplate.cloneNode(true) : defaultItemTemplate.cloneNode(true) ;

                var checkbox = newItem.getElementsByTagName("checkbox")[0];
                checkbox.setAttribute("checked",!!action.show);

                let icon = newItem.getElementsByTagName("image")[0];
                icon.setAttribute("src", Flagfox.getFaviconForTemplate(action.template));  // Get favicon or local icon if disabled
                icon.onerror = function() {
                    icon.setAttribute("src", "chrome://flagfox/content/icons/default.png");
                };

                var labels = newItem.getElementsByTagName("label");

                var localizedName = Flagfox.actions.getLocalizedName(action);
                var nameLabel = labels[0];
                nameLabel.setAttribute("value",localizedName);
                nameLabel.setAttribute("tooltiptext",localizedName);

                if (action.iconclick || action.hotkey)
                {
                    var shortcutsList = "";
                    if (action.iconclick)
                        shortcutsList += getString(action.iconclick);
                    if (action.iconclick && action.hotkey)
                        shortcutsList += ", ";
                    if (action.hotkey)
                        shortcutsList += hotkeyToString(action.hotkey);
                    var shortcutsLabel = labels[1];
                    shortcutsLabel.setAttribute("value",shortcutsList);
                    shortcutsLabel.setAttribute("tooltiptext",shortcutsList);
                }

                let dragDataString = localizedName + "\n" + action.template + "\n";
                let onDragStart = function(event)
                {
                    if (!newItem.selected)
                        return;
                    event.dataTransfer.setDragImage(icon,16,16);
                    event.dataTransfer.mozSetDataAt("application/x-moz-node",newItem,0);  // Data for drag to reorder
                    event.dataTransfer.setData("text/plain",dragDataString);              // Data for drag to copy as text
                };
                newItem.addEventListener("dragstart",onDragStart);

                actionsBox.appendChild(newItem);
            }

            for (let i in trashBin)
                toggleDeleteAction(i);  // Carry over previously pending deletes

            actionsBox.selectedIndex = -1;  // Force lack of selection (needed when refreshing)

            setArrowStates();
        }

        function getDragTargetID(event)  // Returns the ID of the richlistitem that is the intended target of a richlistitem drag event
        {
            var target = event.target;
            if (document.tooltipNode && target.tagName == "window")  // Dragging over a tooltip (no idea why its tagName == "window"; must listen to window)
                target = document.tooltipNode;
            var targetID = getIDofActionFromChild(target);  // Get ID of (parent) richlistitem
            if (targetID == -1 && actionsBox === target)  // Dragging over empty portion of actionsBox; target last item instead
                targetID = actionsBox.getRowCount()-1;
            return targetID;
        }

        function getActionDragDelta(draggedID,targetID)
        {
            if (draggedID == -1 || targetID == -1)
                return 0;
            return targetID - draggedID;
        }

        function onDragOver(event)
        {
            if (!event.dataTransfer)
                return;
            if (event.dataTransfer.mozTypesAt(0).contains("application/x-moz-node"))  // Dragging action in list to reorder
            {
                var targetID = getDragTargetID(event);
                var targetItem = actionsBox.getItemAtIndex(targetID);
                if (!targetItem)
                    return;

                event.preventDefault();  // Allow dropping
                event.dataTransfer.dropEffect = "move";

                var draggedItem = event.dataTransfer.mozGetDataAt("application/x-moz-node",0);
                var draggedID = actionsBox.getIndexOfItem(draggedItem);

                // Show drop marker at target location
                var delta = getActionDragDelta(draggedID,targetID);
                if (delta > 0)
                    targetItem.style.borderBottom = "dotted";
                else if (delta < 0)
                    targetItem.style.borderTop = "dotted";
                targetItem.style.borderColor = "Highlight";

                // Automatically scroll as needed
                actionsBox.ensureIndexIsVisible(targetID-1);
                actionsBox.ensureIndexIsVisible(targetID);
                actionsBox.ensureIndexIsVisible(targetID+1);
            }
            else  // Something else was dragged over
            {
                for (let i in importableTextTypes)
                    if (event.dataTransfer.types.contains(importableTextTypes[i]))
                    {
                        var data = event.dataTransfer.getData(importableTextTypes[i]);
                        if (!data || !data.length)
                            continue;
                        event.preventDefault();  // Allow dropping
                        event.dataTransfer.dropEffect = "copy";
                        actionsBox.parentNode.style.border = "dotted Highlight";
                        break;
                    }
            }

/*          // Import debug
            var output = [];
            for (let i=0; i<event.dataTransfer.types.length; i++)
            {
                var type = event.dataTransfer.types[i];
                output.push(type + ": \"" + event.dataTransfer.getData(type) + "\"");
            }
            Components.utils.reportError(output.join("\n"));
*/
        }

        function onDragExit(event)  // Clean up drop markers
        {
            actionsBox.parentNode.style.border = "dotted transparent";

            var targetID = getDragTargetID(event);
            var targetItem = actionsBox.getItemAtIndex(targetID);
            if (targetItem)
                targetItem.style.border = "";
        }

        function onDragDrop(event)
        {
            onDragExit(event);  // Need to fire explicitly for Gecko 2.0+ (Firefox 4.0+)

            if (event.dataTransfer.mozTypesAt(0).contains("application/x-moz-node"))  // Drag & drop to rearange items
            {
                var draggedItem = event.dataTransfer.mozGetDataAt("application/x-moz-node",0);
                var draggedID = actionsBox.getIndexOfItem(draggedItem);
                var targetID = getDragTargetID(event);
                var delta = getActionDragDelta(draggedID,targetID);
                if (delta != 0)
                    moveSelectedAction(delta);
            }
            else  // Something else was dropped
            {
                for (let i=0; i<importableTextTypes.length; i++)  // Check in order
                    if ( event.dataTransfer.types.contains(importableTextTypes[i]) &&
                         importData(importableTextTypes[i], event.dataTransfer.getData(importableTextTypes[i])) )
                        return;
            }
        }

        function fetchStringFromClipboard()  // Fetched string will be stored in the "clipboardStringBuffer" variable (set to null on fail)
        {
            try  // Wow, this is convoluted to do... (and the docs on this junk suck)
            {
                var clipboard = Components.classes["@mozilla.org/widget/clipboard;1"]                           // Get the clipboard service
                                          .getService(Components.interfaces.nsIClipboard);
                if (!clipboard.hasDataMatchingFlavors(["text/unicode"], 1, clipboard.kGlobalClipboard))         // Check for Unicode text in global clipboard
                    throw null;
                var transfer = Components.classes["@mozilla.org/widget/transferable;1"]                         // Create annoying middle-man "transfer" structure
                                         .createInstance(Components.interfaces.nsITransferable);
                transfer.init(null);                                                                            // Data coming from clipboard, so null privacy context
                transfer.addDataFlavor("text/unicode");                                                         // Set to Unicode mode
                clipboard.getData(transfer, clipboard.kGlobalClipboard);                                        // Copy global clipboard data into transfer interface
                var supportsString = new Object();
                var supportsStringLength = new Object();
                transfer.getTransferData("text/unicode", supportsString, supportsStringLength);                 // Copy data from transfer interface to supports string interface
                supportsString = supportsString.value.QueryInterface(Components.interfaces.nsISupportsString);  // Access supports string interface
                clipboardStringBuffer = supportsString.data.substring(0, supportsStringLength.value / 2);       // Get the actual usable string in the supports string interface
            }
            catch (e)
            {
                clipboardStringBuffer = null;
            }
        }

        function checkClipboardContents()  // Fetches and checks the clipboard contents for actions; returns true if there are any
        {
            fetchStringFromClipboard();
            return clipboardStringBuffer ? containsTemplateText(clipboardStringBuffer) : false ;
        }

        function pasteFromBuffer()
        {
            if (clipboardStringBuffer)
                importData("text/plain", clipboardStringBuffer);
        }

        function attemptPaste()  // Haven't checked the clipboard yet; do so, and paste if possible
        {
            if (checkClipboardContents())
                pasteFromBuffer();
        }

        function importData(mimeType,data)  // Handle dropped or pasted text data
        {
            // Import debug
            //Components.utils.reportError("Importing \""+mimeType+"\": " + data);

            switch (mimeType)
            {
                case "text/x-moz-url":  // Mozilla URL+name format
                    var lines = data.split('\n');
                    if (lines.length != 2)
                        return false;
                    openEditAction("new", lines[0], lines[1]);
                    return true;

                case "text/plain":  // Everything else; actions to action lists to giant piles with actions somewhere in them to anything with maybe a URL in it
                    var lines = data.split('\n').filter(function(line){return line.length>0;});

                    // First try looking for a parsable template list
                    var parsed = parseTemplateList(lines);
                    if (parsed instanceof Array)
                    {
                        Flagfox.actions.append(parsed);
                        Flagfox.actions.save();
                        generateActionsEditList();
                        focusAction(Flagfox.actions.length-1);
                        return true;
                    }
                    else if (parsed)  // Just one template with no name; open dialog with it
                    {
                        openEditAction("new", parsed);
                        return true;
                    }

                    // No templates found; try finding first URL to use as a starting point
                    const urlPattern = /(https?:\/\/|www\.)[^\s'"`<>(){}[\]]+/i;  // Loose, but just want to exclude obvious non-URLs
                    for (let i=0; i<lines.length; i++)
                        if (urlPattern.test(lines[i]))
                        {
                            openEditAction("new", lines[i]);
                            return true;
                        }
                    return false;  // Nothing useful found

                case "application/xml":
                case "text/html":  // HTML/XML (just try to grab the first link)
                    try {
                        var parser = new DOMParser();
                        var firstLink = parser.parseFromString(data, mimeType)
                                              .getElementsByTagName("a")[0];
                        var href = firstLink.getAttribute("href");
                        var name = firstLink.textContent;
                        if (!href)
                            return false;
                    } catch (e) { return false; }
                    openEditAction("new", href, name)
                    return true;

                default:
                    throw Error("Invalid type passed to importData()");
            }
        }

        function parseTemplateList(lines)
        {
            var lineIsTemplate = lines.map(containsTemplateText);
            var newActions = [];
            for (let i = lineIsTemplate.lastIndexOf(true); i >= 0; i--)
                if (lineIsTemplate[i] && lines[i-1] !== undefined && !lineIsTemplate[i-1])
                {
                    newActions.unshift( { custom: true,
                                          name: cleanImportedLine(lines[i-1], nameMaxLength),
                                          template: safeDecodeURI(cleanImportedLine(lines[i], templateMaxLength)) } );
                    i--;  // Skip over name
                }

            if (newActions.length)
                return newActions;  // 1st attempt: return fully parsed actions list array

            var firstTemplateLineID = lineIsTemplate.indexOf(true);
            if (firstTemplateLineID != -1)
                return lines[firstTemplateLineID];  // 2nd attempt; not list, so return first template line

            return null;  // No templates here
        }

        function cleanImportedLine(line,cap)  // Trim off leading/trailing spaces as well as any leading bullets
        {
            return line.replace(/^[\s*#@>&\-=+.:]*/,'').trimRight().substr(0,cap);
        }

        function containsTemplateText(data)  // Returns true if somewhere in the given data is at least one template placeholder
        {
            return (/\{(fullurl|(base)?domainname|tld|ipaddress|country(code|name)|title|meta-.*|(base)?locale(-ui|-os|-page)?)\}/i).test(data);
        }

        function safeDecodeURI(uri)  // Try to decode URI, but if it throws (malformed URI) then just leave it as-is
        {
            try { return decodeURI(uri); }
            catch (e) { return uri; }
        }

        function hotkeyToString(hotkey)
        {
            return hotkey.mods.replace(/ /g,"\u2219")
                              .replace("ctrl",platformKeys.getString("VK_CONTROL"))
                              .replace("alt",platformKeys.getString("VK_ALT"))
                              .replace("meta",platformKeys.getString("VK_META"))
                              .replace("shift",platformKeys.getString("VK_SHIFT"))
                   + "\u2219" + hotkey.key.replace(" ","\u2423");
        }

        function canMoveAction(id,delta)
        {
            if (id < 0 || id >= Flagfox.actions.length)
                return false;
            var newid = id + delta;
            if (newid < 0 || newid >= Flagfox.actions.length || newid == id)
                return false;
            return true;
        }

        function moveSelectedAction(delta)
        {
            var id = actionsBox.selectedIndex;

            if (!canMoveAction(id,delta))
                return;
            var newid = id + delta;

            // Move action in main array
            var action = Flagfox.actions.remove(id);
            Flagfox.actions.insert(newid,action);
            softSaveActions();

            // Move element in edit box
            var item = actionsBox.removeItemAt(id);
            var newNextSibling = actionsBox.getItemAtIndex(newid);
            actionsBox.insertBefore(item,newNextSibling);

            forceSelectedVisible();
            setArrowStates();
        }

        function toggleDeleteAction(id)  // Delete/Undelete
        {
            if (!Flagfox.actions.getByID(id).custom)
                return;  // May only delete user's custom actions, not defaults

            var item = actionsBox.getItemAtIndex(id);
            item.disabled = !item.disabled;
            var children = item.getElementsByTagName("*");
            for (let i=0; i < children.length; i++)
            {
                if (children[i].checked)  // Un-show any listed to show (doCommand() doesn't seem to work here)
                    children[i].click();
                else if (children[i].src)  // Toggle edit/delete and undelete icons
                    children[i].hidden = !children[i].hidden;
                children[i].disabled = item.disabled;
            }
        }

        function onDeleteKeyPress()
        {
            if (actionsBox.selectedItem && Flagfox.actions.getByID(actionsBox.selectedIndex).custom)
            {
                // Delete or undelete
                toggleDeleteAction(actionsBox.selectedIndex);
                // Also select the next item in the list to make multi-(un)deletions quicker to do
                if (actionsBox.selectedIndex < actionsBox.itemCount)
                    actionsBox.selectedIndex++;
            }
        }

        function onEnterKeyPress()
        {
            var selectedItem = actionsBox.selectedItem;
            if (selectedItem)
            {
                if (selectedItem.disabled)
                    toggleDeleteAction(actionsBox.selectedIndex);
                openEditAction(actionsBox.selectedIndex);
            }
        }

        function onNavigationKeyPress(key)  // On arrow key, page up/down, home/end
        {
            actionsBox.focus();
            if (actionsBox.selectedItem)  // Navigation keys work automatically with a selected item
                return;
            if (key == "end")
                actionsBox.selectedIndex = actionsBox.itemCount-1;
            else
                actionsBox.selectedIndex = 0;  // On all keys but "end", just select the first item first, then keys can navigate in list
        }

        function softSaveActions()  // Make actions changes take effect, but don't save to pref until the window is closed (minimizes saves for minor changes)
        {
            needToSaveActions = true;
            Flagfox.actions.refresh();
        }

        function emptyTrashAndSave()  // Perform any pending deletes and save on window close
        {
            for (let i = actionsBox.getRowCount()-1; i >= 0; i--)  // Must search backwards; higher IDs change after a delete
                if (actionsBox.getItemAtIndex(i).disabled)
                {
                    Flagfox.actions.remove(i);
                    needToSaveActions = true;
                }

            if (needToSaveActions)
                Flagfox.actions.save();  // Hard save to pref and make changes take effect
        }

        function forceSelectedVisible()  // Auto-scroll to force the selected item to be fully in view
        {
            actionsBox.ensureIndexIsVisible(actionsBox.selectedIndex);
        }

        function focusAction(id)
        {
            actionsBox.selectedIndex = id;
            forceSelectedVisible();
        }

        function setArrowStates()  // Disable arrows (no hand cursor and 50% opacity) if the selected item can't move any further in that direction
        {
            var id = actionsBox.selectedIndex;
            document.getElementById("up").setAttribute("disabled", !canMoveAction(id,-1));
            document.getElementById("down").setAttribute("disabled", !canMoveAction(id,+1));
        }

        function resetMessagesPrefs()  // Resets all "don't show this again" selections and resets messages per session limits (via Flagfox's pref observer)
        {
            prefs.reset("warn.proxy");
            prefs.reset("warn.stale");
            prefs.reset("warn.tld");
            document.getElementById("resetMessagesLink").hidden = true;
        }

        function openIconsPreview()
        {
            window.openDialog("chrome://flagfox/content/preview.xul", "FlagfoxIconsPreview", "chrome,dialog,centerscreen,modal").focus();
        }

        function openEditAction(id,startingTemplate,startingName)
        {
            window.openDialog("chrome://flagfox/content/editaction.xul", "FlagfoxEditAction", "chrome,dialog,centerscreen,modal", id, startingTemplate, startingName).focus();
        }

        function openCloneSelectedAction()
        {
            if (actionsBox.selectedIndex == -1)
                return;
            var action = Flagfox.actions.getByID(actionsBox.selectedIndex);
            if (action)
                openEditAction("new", action.template, Flagfox.actions.getLocalizedName(action));
        }

        function initAddPopup()
        {
            document.getElementById("clone").disabled = !actionsBox.selectedCount;  // Can't clone if there's no action selected to clone
            document.getElementById("paste").disabled = !checkClipboardContents();  // Can't paste if there's no action(s) in the clipboard to paste (refreshes buffer)
        }

        function gotoGetMorePage()
        {
            Flagfox.addTabInCurrentBrowser("http://flagfox.net/customactions");
        }

        function setShowFavicons()
        {
            prefs.set("showfavicons", document.getElementById("showFaviconsCheckbox").checked);
        }

        function setOpenLinksIn()
        {
            prefs.set("openlinksin", document.getElementById("openLinksInMenu").selectedItem.id);
        }
    ]]>
    </script>

    <groupbox id="generalOptions">

        <hbox>
            <spacer width="5"/>
            <hbox class="icon text-link" onclick="openIconsPreview();">
                <image src="chrome://flagfox/content/icons/preview.png"/>
                <label value="&prefs.previewflagslabel;"/>
            </hbox>
        </hbox>

        <separator class="thin"/>

        <hbox>
            <checkbox label="&prefs.showfaviconslabel;" id="showFaviconsCheckbox" oncommand="setShowFavicons(); generateActionsEditList();"/>
        </hbox>

        <separator class="thin"/>

        <hbox>
            <label value="&prefs.openinlabel;" control="openLinksInMenu"/>
            <menulist sizetopopup="always" id="openLinksInMenu" oncommand="setOpenLinksIn();">
                <menupopup>
                    <menuitem id="tabFG" label="&prefs.tabFGlabel;"/>
                    <menuitem id="tabBG" label="&prefs.tabBGlabel;"/>
                    <menuitem id="winFG" label="&prefs.winFGlabel;"/>
                    <menuitem id="winBG" label="&prefs.winBGlabel;"/>
                    <menuitem id="currentTab" label="&prefs.currentTablabel;"/>
                </menupopup>
            </menulist>
        </hbox>

    </groupbox>

    <separator class="thin"/>

    <groupbox flex="1">
        <caption label="&prefs.customizeactionslabel;"/>

        <box style="border: dotted transparent;" flex="1"> <!-- Need to use a border box to get style to show; has transparent border as placeholder to maintain size -->
            <richlistbox id="actionsRichlistbox" flex="1" style="margin: 1px;"
                                                 minheight="100" height="325"
                                                 minwidth="350" width="400"
                                                 onselect="forceSelectedVisible(); setArrowStates();"/>
        </box>

        <hbox style="padding: 2px 10px;">
            <!-- combination button + side menu -->
            <button type="menu-button" label="&prefs.addnewactionlabel;"
                    image="chrome://flagfox/content/icons/add.png"
                    oncommand="openEditAction('new');">
                <menupopup onpopupshowing="initAddPopup();" oncommand="event.stopPropagation();"> <!-- stop event propagation here to not do both menuitem and button commands -->
                    <menuitem label="&prefs.cloneactionlabel;"
                              class="menuitem-iconic" image="chrome://flagfox/content/icons/clone.png"
                              id="clone" oncommand="openCloneSelectedAction();"/>
                    <menuitem label="&prefs.pasteactionlabel;"
                              class="menuitem-iconic" image="chrome://flagfox/content/icons/copy.png"
                              id="paste" oncommand="pasteFromBuffer();"/> <!-- initAddPopup() has filled the buffer to check to see if this is possible -->
                    <menuseparator/>
                    <menuitem label="&prefs.actionsforumlabel;"
                              class="menuitem-iconic" image="chrome://flagfox/content/icons/goto.png"
                              oncommand="gotoGetMorePage();"/>
                </menupopup>
            </button>
            <spacer minwidth="20" flex="1"/>
            <label value="&prefs.moveselectedlabel;"/>
            <image src="chrome://flagfox/content/icons/down.png" class="icon" id="down" onclick="moveSelectedAction(+1);"/>
            <image src="chrome://flagfox/content/icons/up.png" class="icon" id="up" onclick="moveSelectedAction(-1);"/>
        </hbox>

    </groupbox>

    <hbox>
        <spacer width="10"/>
        <hbox id="resetMessagesLink" class="icon text-link" hidden="true" onclick="resetMessagesPrefs();">
            <image src="chrome://flagfox/content/icons/messages.png"/>
            <label value="&prefs.resetmessageslabel;"/>
        </hbox>
        <spacer flex="5"/>
        <button label="&close;" oncommand="window.close();" default="true"/>
    </hbox>

</window>
